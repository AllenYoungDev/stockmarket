openapi: 3.0.0
info:
  description: >
    Allen Young's Stockmarket is a full-stack web application for operating a
    private online stockmarket in the cloud.
  version: 1.0.0
  title: Allen Young's Stockmarket Demo Backend API
  termsOfService: https://stockmarket.allenyoung.dev/terms/
  contact:
    name: Allen Young
    url: https://www.allenyoung.dev
    email: allenyoung@allenyoung.dev
  license:
    name: MIT license
    url: https://github.com/AllenYoungDev/stockmarket/blob/main/LICENSE
servers:
  - description: SwaggerHub API Auto Mocking
    url: >-
      https://virtserver.swaggerhub.com/ALLENYOUNG2004_1/allen-young-stockmarket-demo/1.0.0
  - url: https://stockmarket.allenyoung.dev
    description: Production server
tags:
  - name: Stockmarket
    description: Stockmarket home webpage route I/O
    externalDocs:
      description: Backend I/O processes spec in Allen Young's Stockmarket developer's journal
      url: https://github.com/AllenYoungDev/stockmarket/tree/main/documentation
  - name: Login
    description: Login webpage route I/O
    externalDocs:
      description: Backend I/O processes spec in Allen Young's Stockmarket developer's journal
      url: https://github.com/AllenYoungDev/stockmarket/tree/main/documentation
  - name: Checkout
    description: Checkout webpage route I/O
    externalDocs:
      description: Backend I/O processes spec in Allen Young's Stockmarket developer's journal
      url: https://github.com/AllenYoungDev/stockmarket/tree/main/documentation
  - name: User registration
    description: User registration webpage route I/O
    externalDocs:
      description: Backend I/O processes spec in Allen Young's Stockmarket developer's journal
      url: https://github.com/AllenYoungDev/stockmarket/tree/main/documentation  
  - name: User account
    description: User account webpage route I/O
    externalDocs:
      description: Backend I/O processes spec in Allen Young's Stockmarket developer's journal
      url: https://github.com/AllenYoungDev/stockmarket/tree/main/documentation
  - name: Admin
    description: Admin webpage route I/O
    externalDocs:
      description: Backend I/O processes spec in Allen Young's Stockmarket developer's journal
      url: https://github.com/AllenYoungDev/stockmarket/tree/main/documentation  
paths:
  /CheckAccessTokenValidity:
    get:
      tags:
        - Stockmarket
      summary: Check if the input access token is valid.
      parameters:
        - $ref: '#/components/parameters/adminCookie'      
      responses:
        '200':
          description: valid access token
          content:
            text/plain:
              schema:
                type: string
                enum:
                  - 'valid'
        '400':
          description: No accessToken cookie
          content:
            text/plain:
              schema:
                type: string
                enum:
                  - 'No accessToken cookie'
        '500':
          description: database access error
          content:
            text/plain:
              schema:
                type: string
                enum:
                  - 'database access error'
        '401':
          description: invalid access token
          content:
            text/plain:
              schema:
                type: string
                enum:
                  - 'invalid'                  
  /GetCompanyStockData:
    get:
      security: []
      tags:
        - Stockmarket
      summary: Retrieves the company stock data
      responses:
        '500':
          description: database access error
          content:
            text/plain:
              schema:
                type: string
                enum:
                  - 'database access error'
        '200':
          description: Company stock data fetch success
          content:
            application/json:
              schema:
                type: array
                items: {}
  /GetNumberOfCompanySharesOwnedByUser:
    get:
      tags:
        - Stockmarket
      summary: Return the number of company shares owned by the user using accessToken cookie
      responses:
        '401':
          description: No accessToken cookie, or invalid access token
          content:
            text/plain:
              schema:
                type: string
                enum:
                  - 'No accessToken cookie'
                  - 'invalid access token'
        '500':
          description: database access error
          content:
            text/plain:
              schema:
                type: string
                enum:
                  - 'database access error'
        '200':
          description: Successful retrieval
          content:
            text/plain:
              schema:
                type: string
  /Login:
    post:
      security: []
      tags:
        - Login
      summary: Successful log in returns the access-token and admin-status cookies that will be used in subsequent API operations
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                emailAddress:
                  type: string
                password:
                  type: string
      responses:
        '500':
          description: database access error
          content:
            text/plain:
              schema:
                type: string
                enum:
                  - 'database access error'
        '400':
          description: invalid email address, unverified email address, invalid password, 
          content:
            text/plain:
              schema:
                type: string
                enum:
                  - 'invalid email address'
                  - 'unverified email address'
                  - 'invalid password'
        '200':
          description: Successful login
          content:
            text/plain:
              schema:
                type: string
                enum:
                  - 'success'   
          headers: 
            Set-Cookie:
              description: accessToken and admin cookies
              schema: 
                type: string                  
  /Logout:
    delete:
      tags:
        - Login
      summary: Deletes the accessToken and admin cookies in the client web browser
      responses:
        '200':
          description: Logout
          content:
            text/plain:
              schema:
                type: string
                enum:
                  - 'success'   
          headers: 
            Set-Cookie:
              description: accessToken and admin cookies set to empty values
              schema: 
                type: string  
  /Checkout/{numberOfSharesToBuy}:
    get:
      tags:
        - Checkout
      summary: Render the checkout page
      parameters:
        - in: path
          name: numberOfSharesToBuy
          schema:
            type: integer
            minimum: 1
          required: true     
      responses:
        '400':
          description: invalid-input responses
          content:
            text/html:
              schema:
                type: string
                description:  Rendered Checkout_invalid-number-of-shares-to-buy page; rendered Checkout_no-admin-stock-purchase page; or rendered Checkout_not-enough-shares-for-purchase page
            text/plain:
              schema:
                type: string 
                enum:
                  - 'No accessToken cookie'             
                  - 'invalid access token'
        '500':
          description: database access error, or checkout page rendering error
          content:
            text/plain:
              schema:
                oneOf:
                  - type: string
                    enum:
                      - 'database access error'
                  - type: string
                    description: checkout page rendering error                 
        '200':
          description: valid-input response
          content:
            text/html:
              schema:
                type: string
                description:  Rendered checkout page
  /Checkout/api/orders:
    post:
      tags:
        - Checkout
      summary: Create a PayPal order
      responses:
        '500':
          description: database access error, or PayPal order creation error
          content:
            text/plain:
              schema:
                oneOf:
                  - type: string
                    enum:
                      - 'database access error'
                  - type: string
                    description: PayPal order creation error
        '400':
          description: invalid-input responses
          content:
            text/html:
              schema:
                type: string
                description:  Rendered Checkout_no-admin-stock-purchase page; Checkout_api_orders_stock-reservation-table-entry-error page; Checkout_api_orders_stock-reservation-expiration
            text/plain:
              schema:
                type: string 
                enum:
                  - 'No accessToken cookie'             
                  - 'invalid access token'
        '200':
          description: valid-input response
          content:
            application/json:
              schema:
                type: string
                description:  Created PayPal order    
  /Checkout/api/orders/{orderID}/capture:
    post:
      tags:
        - Checkout
      summary: Capture PayPal payment
      parameters:
        - name: orderID
          in: path
          description: The previously created PayPal order ID
          required: true
          schema:
            type: string
      responses:
        '500':
          description: database access error, or PayPal order creation error
          content:
            text/plain:
              schema:
                oneOf:
                  - type: string
                    enum:
                      - 'database access error'
                      - 'Successful payment, but failure to record in database.  You may have already made successful payment for this order, or a database access error occurred.  Please contact us for support.'
                  - type: string
                    description: PayPal payment capture error
        '400':
          description: invalid-input responses
          content:
            text/html:
              schema:
                type: string
                description:  Rendered Checkout_no-admin-stock-purchase page
            text/plain:
              schema:
                type: string 
                enum:
                  - 'No accessToken cookie'             
                  - 'invalid access token'
        '200':
          description: valid-input response
          content:
            application/json:
              schema:
                type: string
                description:  PayPal payment capture data
  /Receipt/{orderID}:
    get:
      tags:
        - Checkout
      summary: Render Company stock purchase receipt page
      parameters:
        - name: orderID
          in: path
          description: PayPal payment order ID
          required: true
          schema:
            type: string
      responses:
        '400':
          description: invalid-input responses
          content:
            text/html:
              schema:
                type: string
                description:  Rendered Receipt_no_transaction_record_error page
            text/plain:
              schema:
                type: string 
                enum:
                  - 'No accessToken cookie'             
                  - 'Invalid access token'    
                  - 'unauthorized request'
                  - 'incomplete transaction'
        '500':
          description: database access error, or PayPal order creation error
          content:
            text/plain:
              schema:
                oneOf:
                  - type: string
                    enum:
                      - 'database access error'
                      - 'Successful payment, but failure to record in database.  You may have already made successful payment for this order, or a database access error occurred.  Please contact us for support.'
                  - type: string
                    description: Receipt_no_transaction_record_error page rendering error
                  - type: string
                    description: Receipt page rendering or sending error                    
        '200':
          description: valid-input response
          content:
            text/html:
              schema:
                type: string
                description:  Rendered Company stock purchase receipt page
  /RegisterUser:
    post:
      tags:
        - User registration
      summary: Record the user to the backend database
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string  
                emailAddress:
                  type: string
                phoneNumber:
                  type: string   
                password:
                  type: string                   
      responses:
        '400':
          description: invalid-input responses
          content:
            text/plain:
              schema:
                type: string 
                enum:
                  - 'Invalid input'             
                  - 'blank input'  
                  - 'invalid email address format'
                  - 'invalid password format'
                  - 'unavailable email address'
        '500':
          description: database access error
          content:
            text/plain:
              schema:
                oneOf:
                  - type: string
                    enum:
                      - 'database access error'                 
        '200':
          description: valid-input response
          content:
            text/plain:
              schema:
                type: string
                description:  access token
  /SendEmailAddressVerificationEmail/{accessToken}/{emailAddress}:
    get:
      tags:
        - User registration
      summary: Send email-address verification email
      parameters:
        - name: accessToken
          in: path
          description: The access token for sending email-address verification email
          required: true
          schema:
            type: string
        - name: emailAddress
          in: path
          description: The email address for sending email-address verification email to
          required: true
          schema:
            type: string            
      responses:
        '500':
          description: database access error
          content:
            text/plain:
              schema:
                oneOf:
                  - type: string
                    enum:
                      - 'database access error' 
                      - 'emailing error'
        '400':
          description: invalid-input responses
          content:
            text/plain:
              schema:
                type: string 
                enum:
                  - 'invalid access token'            
                  - 'invalid email address' 
                  - 'verified email address'
                  - 'email address required'
        '200':
          description: valid-input response
          content:
            text/plain:
              schema:
                type: string
                enum:
                  - 'success'
  /GetEmailAddressVerificationSuccessPage/{accessToken}:
    get:
      tags:
        - User registration
      summary: Render and return the email-address verification success page
      description: Check the access token in the users table.  If the access token doesn't exist, return an HTML page indicating the error status.  If the access token exists, set the 'email address verified' field value to 'true' in the users table entry, and return the email address verification success notification HTML page.
      parameters:
        - name: accessToken
          in: path
          description: The access token for rendering and returning the email-address verification success page
          required: true
          schema:
            type: string      
      responses:
        '500':
          description: database access error
          content:
            text/plain:
              schema:
                oneOf:
                  - type: string
                    enum:
                      - 'database access error' 
                      - 'emailing error'
        '400':
          description: invalid-input response
          content:
            text/plain:
              schema:
                type: string 
                enum:
                  - 'invalid access token'
        '200':
          description: valid-input response
          content:
            text/html:
              schema:
                type: string
                description: Rendered GetEmailAddressVerificationSuccessPage_success_notification page
  /SendResetPasswordEmail/{emailAddress}:
    get:
      tags:
        - User registration
      summary: Send a reset-password email to the provided email address
      parameters:
        - name: emailAddress
          in: path
          description: The email address to send the reset-password email to
          required: true
          schema:
            type: string
      responses:
        '400':
          description: invalid-input response
          content:
            text/plain:
              schema:
                type: string 
                enum:
                  - 'invalid email address format'
                  - 'invalid email address'
                  - 'unverified email address'
        '500':
          description: database access error, or emailing error
          content:
            text/plain:
              schema:
                oneOf:
                  - type: string
                    enum:
                      - 'database access error' 
                      - 'emailing error'
        '200':
          description: valid-input response
          content:
            text/html:
              schema:
                type: string
                description: Rendered ResetPassword_check-your-email-for-password-reset page
  /ResetPassword:
    post:
      tags:
        - User registration
      summary: Reset the user password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                accessToken:
                  type: string   
                password:
                  type: string                     
      responses:
        '500':
          description: database access error
          content:
            text/plain:
              schema:
                type: string
                enum:
                  - 'database access error'      
        '400':
          description: invalid-input response
          content:
            text/plain:
              schema:
                type: string 
                enum:
                  - 'invalid password format'
            text/html:
              schema:
                type: string
                description: Rendered invalid_access_token_error page                  
        '200':
          description: valid-input response
          content:
            text/html:
              schema:
                type: string
                description: Rendered ResetPassword_check-your-email-for-password-reset page
  /GetUserAccountSettings:
    get:
      tags:
        - User account
      summary: Get user account settings
      responses:
        '400':
          description: invalid-input response
          content:
            text/plain:
              schema:
                type: string 
                enum:
                  - 'No accessToken cookie'
                  - 'invalid access token'     
        '500':
          description: database access error
          content:
            text/plain:
              schema:
                type: string
                enum:
                  - 'database access error'      
        '200':
          description: valid-input response
          content:
            application/json:
              schema:
                type: object
                properties:
                  userFirstName:
                    type: string
                  userLastName:
                    type: string   
                  userEmailAddress:
                    type: string
                  userPhoneNumber:
                    type: string                      
  /UpdateUserAccountSettings:
    post:
      tags:
        - User registration
      summary: Update user account settings
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string   
                lastName:
                  type: string        
                emailAddress:
                  type: string   
                phoneNumber:
                  type: string    
                password:
                  type: string                  
      responses:
        '400':
          description: invalid-input response
          content:
            text/plain:
              schema:
                type: string 
                enum:
                  - 'No accessToken cookie'
                  - 'invalid access token' 
                  - 'all inputs are empty'
                  - 'invalid email address format'
                  - 'invalid password format'
        '500':
          description: database access error
          content:
            text/plain:
              schema:
                type: string
                enum:
                  - 'database access error'      
        '200':
          description: valid-input response
          content:
            text/plain:
              schema:
                type: string
                enum:
                  - 'success'
  /GetNumberOfUserStockTransactions:
    get:
      tags:
        - User account
      summary: Get the number of user stock transactions
      responses:
        '400':
          description: invalid-input response
          content:
            text/plain:
              schema:
                type: string 
                enum:
                  - 'No accessToken cookie'
                  - 'invalid access token' 
                  - 'invalid user'
        '500':
          description: database access error
          content:
            text/plain:
              schema:
                type: string
                enum:
                  - 'database access error'   
                  - 'successful result send error'
        '200':
          description: valid-input response
          content:
            text/plain:
              schema:
                type: string
                description: The number of user stock transactions
  /GetUserStockTransactionHistory/{pageNumber}:
    get:
      tags:
        - User account
      summary: Get the user stock transaction history
      parameters:
        - name: pageNumber
          in: path
          description: The page number of the user stock transaction history
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '400':
          description: invalid-input response
          content:
            text/plain:
              schema:
                type: string 
                enum:
                  - 'No accessToken cookie'
                  - 'invalid access token'
        '500':
          description: database access error
          content:
            text/plain:
              schema:
                type: string
                enum:
                  - 'database access error'
        '200':
          description: valid-input response
          content:
            application/json:
              schema:
                type: object
                properties: {}
                description: The user stock transaction history page content
  /GetTotalNumberOfUsers:
    get:
      tags:
        - Admin
      summary: Get the total number of users
      responses:
        '400':
          description: invalid-input response
          content:
            text/plain:
              schema:
                type: string 
                enum:
                  - 'No accessToken cookie'
                  - 'invalid access token' 
                  - 'invalid user'
        '500':
          description: database access error
          content:
            text/plain:
              schema:
                type: string
                enum:
                  - 'database access error'
        '200':
          description: valid-input response
          content:
            text/plain:
              schema:
                type: string
                description: The total number of users
  /GetUserList/{pageNumber}:
    get:
      tags:
        - Admin
      summary: Get the user list
      parameters:
        - name: pageNumber
          in: path
          description: The page number of the user list
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '400':
          description: invalid-input response
          content:
            text/plain:
              schema:
                type: string 
                enum:
                  - 'No accessToken cookie'
                  - 'invalid access token'
                  - 'access prohibited'
        '500':
          description: database access error
          content:
            text/plain:
              schema:
                type: string
                enum:
                  - 'database access error'
        '200':
          description: valid-input response
          content:
            application/json:
              schema:
                type: object
                properties: {}
                description: The user-list page content
  /GetTotalNumberOfTransactions:
    get:
      tags:
        - Admin
      summary: Get the total number of transactions
      responses:
        '400':
          description: invalid-input response
          content:
            text/plain:
              schema:
                type: string 
                enum:
                  - 'No accessToken cookie'
                  - 'invalid access token' 
                  - 'invalid user'
        '500':
          description: database access error
          content:
            text/plain:
              schema:
                type: string
                enum:
                  - 'database access error'
        '200':
          description: valid-input response
          content:
            text/plain:
              schema:
                type: string
                description: The total number of transactions
  /GetTransactionHistory/{pageNumber}:
    get:
      tags:
        - Admin
      summary: Get the transaction history page content
      parameters:
        - name: pageNumber
          in: path
          description: The transaction history page number
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        '400':
          description: invalid-input response
          content:
            text/plain:
              schema:
                type: string 
                enum:
                  - 'No accessToken cookie'
                  - 'invalid access token'
                  - 'access prohibited'
        '500':
          description: database access error
          content:
            text/plain:
              schema:
                type: string
                enum:
                  - 'database access error'
        '200':
          description: valid-input response
          content:
            application/json:
              schema:
                type: object
                properties: {}
                description: The transaction-history page content
externalDocs:
  description: Allen Young's Stockmarket Demo developer's journal
  url: https://github.com/AllenYoungDev/stockmarket/tree/main/documentation
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: accessToken
  parameters:
    adminCookie:  # <-- Arbitrary name for the definition that will be used to refer to it.
                  # Not necessarily the same as the parameter name.
      in: cookie
      name: admin
      required: true
      schema:
        type: string
        enum: ['true', 'false']     
security:
  - cookieAuth: []